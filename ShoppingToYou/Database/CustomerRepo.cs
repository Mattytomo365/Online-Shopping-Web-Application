using Database;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;

namespace ShoppingToYou.Database
{
    public class CustomerRepo : ICustomerRepo
    {
        private readonly ISqlServerConnection sqlServerConnection;

        public CustomerRepo(IConfiguration configuration, ISqlServerConnection sqlServerConnection)
        {
            this.sqlServerConnection = sqlServerConnection ?? throw new ArgumentNullException(nameof(sqlServerConnection));
        }

        public int CheckCustomerByEmail(string email)
        {
            if (string.IsNullOrEmpty(email))
            {
                throw new ArgumentException($"'{nameof(email)}' cannot be null or empty.", nameof(email));
            }

            using SqlConnection conn = sqlServerConnection.GetConnection;
            conn.Open();

            using SqlCommand cmd = new SqlCommand("CheckCustomer", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@email", email);

            // execute query
            object o = cmd.ExecuteScalar(); // returns first value in the first row in the table
            if (o != null)
            {
                return (int)o; //if the customer is registered (they have already given their address etc..)
            }

            return 0; 
        }

        public int InsertCustomer(string email, string firstName, string surname, string address1, string address2, string address3,
                                   string address4, string postcode, string phone)
        {
            using SqlConnection conn = sqlServerConnection.GetConnection;
            conn.Open();

            using SqlCommand cmd = new("InsertCustomerDetails", conn); //calls this stored procedure to transfer details enetered customer details partial view to the database
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@Email", email);
            cmd.Parameters.AddWithValue("@FirstName", firstName);
            cmd.Parameters.AddWithValue("@Surname", surname);
            cmd.Parameters.AddWithValue("@Address1", address1);
            cmd.Parameters.AddWithValue("@Address2", address2 ?? "");
            cmd.Parameters.AddWithValue("@Address3", address3 ?? "");
            cmd.Parameters.AddWithValue("@Address4", address4 ?? "");
            cmd.Parameters.AddWithValue("@Postcode", postcode);
            cmd.Parameters.AddWithValue("@Phone", phone);
            cmd.Parameters.Add("@CustomerID", SqlDbType.Int).Direction = ParameterDirection.Output; //gets the new id generated by the database

            try
            {
                // execute query
                cmd.ExecuteNonQuery();
                int custID = Convert.ToInt32(cmd.Parameters["@CustomerID"].Value);

                if (custID > 0)
                {
                    return custID; //returns new customer id
                }
                else
                {
                    throw new ApplicationException("Failed To Insert Customer Details");
                }
            }
            catch(Exception exception)
            {
                throw new ApplicationException("Failed To Insert Customer Details");
            }

        }
    }
}
